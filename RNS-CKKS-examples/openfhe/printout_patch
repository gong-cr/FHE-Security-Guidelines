diff --git a/src/pke/lib/scheme/ckksrns/ckksrns-fhe.cpp b/src/pke/lib/scheme/ckksrns/ckksrns-fhe.cpp
index 69cdd69..40af51f 100644
--- a/src/pke/lib/scheme/ckksrns/ckksrns-fhe.cpp
+++ b/src/pke/lib/scheme/ckksrns/ckksrns-fhe.cpp
@@ -511,6 +511,7 @@ Ciphertext<DCRTPoly> FHECKKSRNS::EvalBootstrap(ConstCiphertext<DCRTPoly> ciphert
     else {
         coefficients = g_coefficientsUniform;
         k            = K_UNIFORM;
+        std::cout << "k = " << k << std::endl;
     }
 
     double constantEvalMult = pre * (1.0 / (k * N));
@@ -2069,13 +2070,13 @@ uint32_t FHECKKSRNS::GetBootstrapDepth(uint32_t approxModDepth, const std::vecto
     if (secretKeyDist == UNIFORM_TERNARY) {
         approxModDepth += R_UNIFORM - 1;
     }
-
+    
     return approxModDepth + levelBudget[0] + levelBudget[1];
 }
 
 uint32_t FHECKKSRNS::GetBootstrapDepth(const std::vector<uint32_t>& levelBudget, SecretKeyDist secretKeyDist) {
     uint32_t approxModDepth = GetModDepthInternal(secretKeyDist);
-
+ 
     return approxModDepth + levelBudget[0] + levelBudget[1];
 }
 //------------------------------------------------------------------------------
diff --git a/src/pke/lib/scheme/ckksrns/ckksrns-parametergeneration.cpp b/src/pke/lib/scheme/ckksrns/ckksrns-parametergeneration.cpp
index 4ef5229..3ecf2a5 100644
--- a/src/pke/lib/scheme/ckksrns/ckksrns-parametergeneration.cpp
+++ b/src/pke/lib/scheme/ckksrns/ckksrns-parametergeneration.cpp
@@ -204,6 +204,15 @@ bool ParameterGenerationCKKSRNS::ParamsGenCKKSRNS(std::shared_ptr<CryptoParamete
     }
     rootsQ[0] = RootOfUnity(cyclOrder, moduliQ[0]);
 
+    std::cout << "number of Q = " << moduliQ.size() << std::endl;
+    double logQ_acc = 0;
+    for (size_t i = 0; i < moduliQ.size(); i++) {
+        std::cout << "moduliQ[" << i << "]=" << moduliQ[i] << " logq[" << i << "]=" 
+		<< std::log2(moduliQ[i].ConvertToDouble()) << std::endl; 
+        logQ_acc += std::log2(moduliQ[i].ConvertToDouble());
+    }
+    std::cout << "logQ = " <<logQ_acc << std::endl;
+
     if (scalTech == FLEXIBLEAUTOEXT) {
         // no need for extra checking as extraModSize is automatically chosen by the library
         moduliQ[numPrimes] = FirstPrime<NativeInteger>(extraModSize - 1, cyclOrder);
diff --git a/src/pke/lib/schemerns/rns-cryptoparameters.cpp b/src/pke/lib/schemerns/rns-cryptoparameters.cpp
index 2b6354c..e4af966 100644
--- a/src/pke/lib/schemerns/rns-cryptoparameters.cpp
+++ b/src/pke/lib/schemerns/rns-cryptoparameters.cpp
@@ -132,6 +132,7 @@ void CryptoParametersRNS::PrecomputeCRTTables(KeySwitchTechnique ksTech, Scaling
         }
         // Select number of primes in auxiliary CRT basis
         sizeP              = ceil(static_cast<double>(maxBits) / auxBits);
+        std::cout << "number of P = " <<sizeP << std::endl;
         uint64_t primeStep = FindAuxPrimeStep();
 
         // Choose special primes in auxiliary basis and compute their roots
@@ -160,6 +161,14 @@ void CryptoParametersRNS::PrecomputeCRTTables(KeySwitchTechnique ksTech, Scaling
             pPrev = moduliP[i];
         }
 
+        double logP_acc = 0;
+        for (usint i = 0; i < sizeP; i++) {
+            std::cout << "moduliP[" << i << "]=" << moduliP[i] << " logP[" << i << "]=" 
+            << std::log2(moduliP[i].ConvertToDouble()) << std::endl; 
+            logP_acc += std::log2(moduliP[i].ConvertToDouble());
+        }
+        std::cout << "logP = " << logP_acc << std::endl;
+
         // Store the created moduli and roots in m_paramsP
         m_paramsP = std::make_shared<ILDCRTParams<BigInteger>>(2 * n, moduliP, rootsP);
 
